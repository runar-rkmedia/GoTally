package web

import (
	"embed"
	"fmt"
	"io/fs"
	"net/http"
	"path"
	"regexp"
)

//go:embed all:static
var webDir embed.FS

func StaticWebHandler() http.Handler {

	fsys := fs.FS(webDir)
	html, _ := fs.Sub(fsys, "static")
	fileserver := http.FileServer(http.FS(html))
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		w.Header().Set("Vary", "Accept-Encoding")
		if hashedFileRegex.MatchString(r.URL.Path) {
			// This should only be for files that can safely be cached for a long
			// time, for instance files that includes a hash for their file-contents
			// like files generated by a web-bundler like vite.
			w.Header().Set("Cache-Control", "max-age=31536000")
		} else {
			ext := path.Ext(r.URL.Path)
			fmt.Println("ext ", ext)
			switch ext {
			case ".otf":
				w.Header().Set("Cache-Control", "max-age=31536000")
			default:
				w.Header().Set("Cache-Control", "max-age=3600")
			}
			// Cache for any other files. In general, I try to keep the cache
			// relatively short while development is ongoing.
		}
		fileserver.ServeHTTP(w, r)
	})
}

var (
	hashedFileRegex = regexp.MustCompile(`\.[0-9a-fA-F]{6,}\.\w{1,8}$`)
)
