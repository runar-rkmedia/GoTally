// Code generated by ifacemaker; DO NOT EDIT.

package tallylogic

import "github.com/runar-rkmedia/gotally/tallylogic/cell"

// BoardController ...
type BoardController interface {
	ID() string
	Copy() BoardController
	GetCellAtIndex(n int) *cell.Cell
	IndexToCord(i int) (column int, row int)
	String() string
	HighestValue() (cell.Cell, int)
	PrintBoard(highlighter func(c CellValuer, index int, padded string) string) string
	PrintForSelection(selection []int) string
	PrintForSelectionNoColor(selection []int) string
	ListEmptyCells() []int
	// Uniqely identifies the board by its value. ID's etc are ignored.
	Hash() string
	ValidCellIndex(index int) bool
	CoordToIndex(x, y int) (int, bool)
	ValidatePath(indexes []int) (err error, invalidIndex int)
	EvaluatesTo(indexes []int, commitResultToBoard bool, noValidate bool) (int64, EvalMethod, error)
	// Evaluates whether a path of indexes results in the targetValue.
	// This method should ideally be as performant as possible, as it will be run in loops.
	SoftEvaluatesTo(indexes []int, targetValue int64) (int64, EvalMethod, error)
	SwipeDirection(direction SwipeDirection) bool
	SwipeDirectionSoft(direction SwipeDirection) ([]cell.Cell, bool)
	SwipeDirectionPreview(direction SwipeDirection) []cell.Cell
	Cells() []cell.Cell
	AreNeighboursByIndex(a, b int) bool
	// Returns the neighbours for a gives cell. Note that the cells might be empty
	NeighboursForCellIndex(index int) ([]int, bool)
	AddCellToBoard(c cell.Cell, index int, overwrite bool) error
}
